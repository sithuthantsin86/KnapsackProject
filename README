#####This is the user manual of Si Thu Thant Sin’s code for PhD project.#####

1.cpp		-	Code for instances generation.
2.cpp		-	Code for instances generation with alpha[]={0.1, 0.25, 0.5, 0.75, 0.9} for capacity.
3.cpp		-	Table based dynamic programming algorithm code.
4.cpp		-	Table based dynamic programming algorithm code parallel version.
5.cpp		-	List based dynamic programming algorithm code.
6.cpp		-	Upper bound algorithm and linear relaxation algorithm for list based dynamic programming.
counters.cpp	-	counter object file for 5.cpp and 6.cpp (List based dynamic programming algorithm code.).



#####Methods#####

UC	= Uncorrelated_data_instances
WC	= Weekly_correlated_instances
SC	= Strongly_correlated_instances
ISC	= Inverse_strongly_correlated_instances
ASC	= Almost_strongly_correlated_instances
SS	= Subset_sum_instances
UCS	= Uncorrelated_instances_with_similar_weights



#####How to compile#####

1)	g++ -o example example.cpp	(code ကုိ နာမည္ေပးၿပီး compile လုပ္ျခင္း)
2)	sudo g++-6 -fopenmp -o example example.cpp	(OpenMP ပါေသာ code ကို နာမည္ေပးၿပီး compile လုပ္ျခင္း)
3)	g++ -c example.cpp -o example.o (or) g++ -c -o example.o example.cpp  (code ဖိုင္ကို object ဖိုင္ျပဳလုပ္ျခင္း)
4)	g++ -o example example_objectfile.o example.cpp (code ကုိ object file ႏွင့္တြဲၿပီး compile လုပ္ျခင္း)



#####Git commands#####

git clone https://github.com/sithuthantsin86/knapsackproblem.git (Git ေပၚမွာရွိတာကုိ လွမ္းၿပီးယူတာ)
git status (ေျပာင္းလဲသြားတဲ့ အေျခအေနေတြကုိ ျပတာ)
git add -A (or) git add “filename” (မိမိေျပာင္းလဲထားတဲ့ ဖိုင္ေတြကို local git ေပၚမွာေပါင္းထည့္ျခင္း)
git commit -m (မိမိဘာေတြ လုပ္ၿပီးသြားလဲဆိုတာကုိ Message နဲ႔မွတ္သားျခင္း) (-m မပါပဲရိုက္ပါက vim နဲ႔ဖိုင္တစ္ဖိုင္ေရးဖို႔ က်လာမယ္)
git push (မိမိစက္ထဲတြင္ ျပင္ဆင္ၿပီးသားအရာေတြအားလံုးကို global git ကိုပို႔တာ)
git pull (Global git မွာရွိတဲ့ ေျပာင္းလဲမႈေတြကို လွမ္းယူတာ)